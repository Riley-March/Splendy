{"version":3,"sources":["components/Card/Card.tsx","components/ToolbarItem/ToolbarItem.tsx","components/Toolbar/Toolbar.tsx","components/Spinner/Spinner.tsx","helpers/colors.ts","pages/TicketPage/TicketPage.tsx","helpers/storage.ts","components/StatsRow/StatsRow.tsx","pages/StatsPage/StatsPage.tsx","pages/AboutPage/AboutPage.tsx","components/Navbar/Navbar.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GET_EVENT","gql","Card","name","event_id","quantity","price","color","eventData","useQuery","variables","data","className","data-testid","event","Button","onClick","console","log","ToolbarItem","props","check_active","active","has_checkbox","onChange","handleClick","type","defaultChecked","is_checked","defaultValue","title","Toolbar","items","map","item","index","id","visible","key","Spinner","colors","get_color","GET_TICKETS","TicketPage","useState","tickets","setTickets","loading","ticketsData","useEffect","update_tickets","clicked_ticket","filtered_tickets","ticket","update_app_setting_storage","object","app_settings","stored_data","localStorage","getItem","JSON","parse","storage_get_item","setItem","stringify","Fragment","e","currentTarget","value","StatsRow","stats","StatsPage","setLoading","a","fetch","process","REACT_APP_API_URL","then","res","json","catch","err","fetchData","change_stat","click_ticket","tickets_copy","clicked_stat","textContent","filter","AboutPage","icon","faCampground","Navbar","to","faTicketAlt","faChartPie","faInfoCircle","App","link","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.53459b05.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Button } from 'reactstrap';\r\n\r\nimport './Card.css';\r\n\r\nconst GET_EVENT = gql`\r\n    query Event($event_id: ID!) { \r\n        event(event_id: $event_id) {\r\n\t\t\t_id\r\n            name\r\n            ticket_url\r\n\t\t}\r\n\t}\r\n`;\r\n\r\ntype Props = {\r\n    name: string,\r\n    event_id: string,\r\n    price: string,\r\n    quantity: number,\r\n    color: string\r\n};\r\n\r\nexport const Card = ({ name, event_id, quantity, price, color }: Props) => {\r\n    const { data: eventData } = useQuery(GET_EVENT, {\r\n        variables: {event_id: event_id}\r\n    });\r\n\r\n    const openUrlHandler = () => {\r\n        console.log('clicked');\r\n    }\r\n\r\n    return (\r\n        <div className={`card card-${color}`}>\r\n            {eventData && (\r\n            <div >\r\n                <h1 data-testid=\"title\" className=\"title\">\r\n                    {name}\r\n                </h1>\r\n                <h1 data-testid=\"sub-title\" className=\"sub-title\">\r\n                    {eventData.event.name}\r\n                </h1>\r\n                <h1 data-testid=\"sub-title\" className=\"sub-title\">\r\n                    {price}\r\n                </h1>\r\n                <h1 data-testid=\"quantity\" className=\"quantity\">\r\n                    {quantity}\r\n                </h1>\r\n                <Button color=\"primary\" onClick={openUrlHandler}>\r\n                    Book Now\r\n                </Button>\r\n            </div>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\n\nimport './ToolbarItem.css';\n\nconst ToolbarItem = (props: any) => {\n    const check_active = props.active ? 'item-active' : true;\n    return (\n        <div data-testid=\"toolbar-item\">\n            {props.has_checkbox ? (\n                <label data-testid=\"check-item\" className=\"item\">\n                    <input onChange={props.handleClick} type=\"checkbox\" defaultChecked={props.is_checked} defaultValue={props.title} />\n                    {props.title}\n                </label>\n            ) : (\n                <div data-testid=\"text-item\" className={`item ${check_active}`} onClick={props.handleClick}>\n                    {props.title}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default ToolbarItem;\n","import React from 'react';\n\nimport './Toolbar.css';\n\nimport ToolbarItem from '../ToolbarItem/ToolbarItem';\n\n\nexport const Toolbar = (props: any) => {\n    const items = props.items.map((item: any, index: number) => {\n        return {\n            id: index,\n            title: item.name,\n            is_checked: item.visible,\n            has_checkbox: props.has_checkbox,\n            active: item.active\n        }\n    });\n\n    return (\n        <div className=\"outer\">\n            <div data-testid=\"toolbar\" className=\"toolbar\">\n                <h2 data-testid=\"title\">{props.title}</h2>\n                <div data-testid=\"items\" className=\"items\">\n                    {items.map((item: any, index: number) => {           \n                        return (\n                            <ToolbarItem\n                                key={index}\n                                handleClick={props.handleClick}\n                                has_checkbox={item.has_checkbox}\n                                {...item}\n                            />\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport './Spinner.css';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"spinner\">\n            <div className=\"lds-dual-ring\"></div>\n        </div>\n    );\n}\n","const colors = [\n    \"blue\",\n    \"yellow\",\n    \"pink\",\n    \"green\",\n    \"orange\"\n]\n\nexport const get_color = (index: number) => {\n    return colors[index];\n}\n\nexport const random_color = () => {\n    const randint = Math.floor(Math.random() * (colors.length));\n    return colors[randint];\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nimport './TicketPage.css';\r\n\r\nimport { Card } from '../../components/Card/Card';\r\nimport { Toolbar } from '../../components/Toolbar/Toolbar';\r\nimport { Spinner } from '../../components/Spinner/Spinner';\r\nimport { storage_get_item, storage_set_item } from '../../helpers/storage';\r\nimport { get_color } from '../../helpers/colors';\r\n\r\nconst GET_TICKETS = gql`\r\n    query Tickets($event_id: ID!) { \r\n        tickets(event_id: $event_id) {\r\n\t\t\t_id\r\n            event_id\r\n            name\r\n            price\r\n            quantity\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const TicketPage = () => {\r\n    const [ tickets, setTickets ]: any = useState([]);\r\n    const [ loading, setLoading ] = useState(false);\r\n\r\n    const event_id = '6031cad12260322fd75a6c93';\r\n    const { data: ticketsData } = useQuery(GET_TICKETS, {\r\n        variables: {event_id: event_id}\r\n    });\r\n\r\n    useEffect(() => {\r\n        //const ws = new WebSocket(`ws://${process.env.REACT_APP_API_URL}`);\r\n        //ws.onopen = () => {\r\n        //    console.log('Connected to Web Socket');\r\n        //}\r\n        //ws.onmessage = (evt) => {\r\n        //    if(evt) {\r\n        //        const cached_app_settings = storage_get_item('app_settings');\r\n        //        let tickets = JSON.parse(evt.data)[0].tickets;\r\n        //        if(cached_app_settings) {\r\n        //            tickets = tickets.map((ticket: any, index: number) => \r\n        //                ({...ticket, visible: cached_app_settings[index].is_checked})\r\n        //            );\r\n        //            \r\n        //        } else {\r\n        //            tickets = tickets.map((ticket: any) => ({...ticket, visible: true}));\r\n        //        }\r\n        //        setTickets(tickets);\r\n        //        tickets.forEach((ticket: any) => {\r\n        //            if(ticket.quantity > 0) {\r\n        //                addNotification({\r\n        //                    title: `${ticket.quantity} x ${ticket.name} Available`,\r\n        //                    subtitle: 'Splendy',\r\n        //                    theme: 'darkblue',\r\n        //                    native: true\r\n        //                });\r\n        //            }\r\n        //        });\r\n        //        setLoading(false);\r\n        //    }\r\n        //}\r\n        //return () => { ws.close(); }\r\n    }, []);\r\n\r\n    const handleTicketFilter = (e: any) => {\r\n        const clicked_ticket = e.currentTarget.value;\r\n        update_tickets(clicked_ticket);\r\n        update_app_setting_storage(clicked_ticket);\r\n    }\r\n\r\n    const update_tickets = (clicked_ticket: any) => {\r\n        let filtered_tickets: any[] = [...tickets];\r\n        filtered_tickets = filtered_tickets.map((ticket: any) => {\r\n            if(ticket.name === clicked_ticket){\r\n                ticket.visible = !ticket.visible;\r\n            }\r\n            return ticket;\r\n        });\r\n        setTickets(filtered_tickets);\r\n    }\r\n\r\n    const update_app_setting_storage = (clicked_ticket: any) => {\r\n        let app_settings = storage_get_item('app_settings');\r\n        app_settings = app_settings.map((item: any) => {\r\n            if(item.title === clicked_ticket){\r\n                item.is_checked = !item.is_checked;\r\n            }\r\n            return item;\r\n        });\r\n        storage_set_item('app_settings', app_settings);\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            {loading ? <Spinner /> : (\r\n                <React.Fragment>\r\n                    <Toolbar \r\n                        title='Toggle Visible Tickets' \r\n                        items={tickets}\r\n                        handleClick={handleTicketFilter}\r\n                        has_checkbox={true}\r\n                    />\r\n                    <div className=\"ticket-page\">\r\n                        <div className=\"card-grid\">\r\n                            {ticketsData && ticketsData.tickets.map((ticket: any, index: number) => {\r\n                                return (\r\n                                    <Card {...ticket} color={get_color(index)} />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","export const storage_get_item = (name: string) => {\n    const stored_data = localStorage.getItem(name);\n    if(stored_data){\n        return JSON.parse(stored_data);\n    }   \n}\n\nexport const storage_set_item = (name: string, object: any) => {\n    localStorage.setItem(name, JSON.stringify(object));\n}\n\nexport const storage_delete_item = (name: string) => {\n    localStorage.removeItem(name);\n}\n\n","import React from 'react';\n\nimport './StatsRow.css';\n\nimport { Card } from '../Card/Card';\nimport { random_color } from '../../helpers/colors';\n\ntype Props = {\n    stats: any\n};\n\nexport const StatsRow = ({stats}: Props) => {\n    return(\n        <div className=\"stats-row\">\n        </div>\n    )\n}\n","import React, { useState, useEffect }  from 'react';\n\nimport './StatsPage.css';\n\nimport { Toolbar } from '../../components/Toolbar/Toolbar';\nimport { StatsRow } from '../../components/StatsRow/StatsRow';\nimport { Spinner } from '../../components/Spinner/Spinner';\n\nexport const StatsPage = () => {\n    const [ tickets, setTickets ]: any = useState([]);\n    const [ loading, setLoading ] = useState(false);\n\n    useEffect(() => {\n        async function fetchData() {\n            setLoading(true);\n            await fetch(`http://${process.env.REACT_APP_API_URL}/get_stats`).then(res => {\n                res.json().then(function(data) {\n                    const tickets = data[0].tickets.map((data: any, index: number) => {\n                        if(index === 0){\n                            return ({...data, active: true})\n                        } else {\n                            return ({...data, active: false});\n                        }\n                    });\n                    setTickets(tickets);\n                    setLoading(false);\n                });\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n        fetchData();\n    }, []);\n\n    const handleStatChange = (e: any) => {\n        const clicked_stat = e.currentTarget.textContent;\n        change_stat(clicked_stat);\n    }\n\n    const change_stat = (click_ticket: any) => {\n        let tickets_copy: any[] = [...tickets];\n        tickets_copy = tickets_copy.map((ticket: any) => {\n            if(ticket.name === click_ticket){\n                ticket.active = true;\n            } else {\n                ticket.active = false;\n            }\n            return ticket;\n        });\n        setTickets(tickets_copy);\n    }\n\n    return (\n        <div>\n            {loading ? <Spinner /> : (\n                <React.Fragment>\n                    <Toolbar \n                        title='Ticket Stats' \n                        items={tickets}\n                        handleClick={handleStatChange}\n                        has_checkbox={false}\n                    />\n                    <div className=\"stats-grid\">\n                        {tickets.filter((ticket: any) => ticket.active).map((ticket: any, index: number) => {\n                            return <StatsRow key={index} stats={ticket.stats}/>\n                        })}\n                    </div>\n                </React.Fragment>\n            )}\n        </div>\n    )\n}\n\nexport default StatsPage;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCampground } from '@fortawesome/free-solid-svg-icons';\n\nimport './AboutPage.css';\n\nexport const AboutPage = () => {\n    return (\n        <div className=\"outer\">\n            <div className=\"about-page\">\n                \n                <div className=\"row\">\n                    <div className=\"section left-section\">\n                        <FontAwesomeIcon icon={faCampground} className=\"about-icon yellow\"/>\n                        <h2 className=\"about-title\">Splendy</h2>\n                        Created by Riley March<br/><br/>\n                        Powered by RAMTEK\n                    </div>\n\n                    <div className=\"section\">\n                        This app is to help people secure splendour in the grass tickets\n                        from the official resale page. <br/><br/>\n                        You can target specific tickets and get a notification as soon as \n                        tickets become available. <br/><br/>\n                        This greatly increases your chances of going to the event!<br/><br/>\n                        If you have come across and issues or want to request a feature please\n                        send an email to: <br/><br/>\n                        support@ramtek.dev <br/><br/>\n                        If you like this app and want to see more please: <br/><br/>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCampground, faTicketAlt, faChartPie, faInfoCircle} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './Navbar.css';\r\n\r\ntype Props = {\r\n    title: string\r\n};\r\n\r\nexport const Navbar = ({title}: Props) => {\r\n    return (\r\n        <div className=\"navbar-outer\">\r\n            <div className=\"navbar\" data-testid=\"navbar\">\r\n                <h2 data-testid=\"navbar-title\">\r\n                    <FontAwesomeIcon icon={faCampground} className=\"icon yellow\"/>\r\n                    {title}\r\n                </h2>\r\n                <span className=\"navbar-links\">\r\n                    <NavLink className=\"link\" to=\"/\" data-testid=\"tickets-link\">\r\n                        <h2>\r\n                            <FontAwesomeIcon icon={faTicketAlt} className=\"icon green\"/>\r\n                            Tickets\r\n                        </h2>\r\n                    </NavLink>\r\n                    <NavLink className=\"link\" to=\"/stats\" data-testid=\"stats-link\">\r\n                        <h2>\r\n                            <FontAwesomeIcon icon={faChartPie} className=\"icon pink\"/>\r\n                            Stats\r\n                        </h2>\r\n                    </NavLink>\r\n                    <NavLink className=\"link\" to=\"/about\" data-testid=\"about-link\">\r\n                        <h2>\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"icon blue\"/>\r\n                            About\r\n                        </h2>\r\n                    </NavLink>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { ApolloProvider, ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Notifications } from 'react-push-notification';\n\nimport './App.css';\n\nimport { TicketPage } from './pages/TicketPage/TicketPage'\nimport { StatsPage } from './pages/StatsPage/StatsPage'\nimport { AboutPage } from './pages/AboutPage/AboutPage'\nimport { Navbar } from './components/Navbar/Navbar'\n\nfunction App() {\n    const link = createHttpLink({\n        uri: `${process.env.REACT_APP_BACKEND_URL}/graphql`,\n    });\n\n\tconst client = new ApolloClient({\n        cache: new InMemoryCache(),\n        link: link,\n\t});\n\n    return (\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <Notifications />\n                <Navbar title=\"Splendy\" />\n                <Route exact path=\"/\" component={TicketPage} />\n                <Route exact path=\"/stats\" component={StatsPage} />\n                <Route exact path=\"/about\" component={AboutPage} />\n            </BrowserRouter>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}